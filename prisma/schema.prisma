// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(cuid())
  email         String         @unique
  password      String
  verified      Boolean        @default(false)
  role          Role           @default(USER)
  flashcards    Flashcard[]
  conversations Conversation[]
  games         Game[]
  lobbies       Lobby[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  UserLobby     UserLobby[]
  Verification  Verification[]
}

model Verification {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    String      @unique
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Flashcard {
  id            Int      @id @default(autoincrement())
  word          String
  hint          String
  definition    String
  pronunciation String
  image         String?
  level         Level
  user          User?    @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Game          Game[]
}

model Conversation {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  message   Message[]
  createdAt DateTime  @default(now())
  Game      Game[]
}

model Message {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  content        String
  type           MessageType
  createdAt      DateTime     @default(now())
}

model Game {
  id             String       @id @default(cuid())
  flashcardId    Int
  userId         String
  createdAt      DateTime     @default(now())
  lobbyId        String?
  conversationId Int
  status         GameStatus
  mode           GameMode
  flashcard      Flashcard    @relation(fields: [flashcardId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  lobby          Lobby?       @relation(fields: [lobbyId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Lobby {
  id        String      @id @default(cuid())
  hostId    String
  createdAt DateTime    @default(now())
  games     Game[]
  host      User        @relation(fields: [hostId], references: [id])
  users     UserLobby[]
}

model UserLobby {
  userId  String
  lobbyId String
  user    User  @relation(fields: [userId], references: [id])
  Lobby   Lobby @relation(fields: [lobbyId], references: [id])

  @@id([userId, lobbyId])
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum MessageType {
  USER
  BOT
}

enum GameMode {
  SINGLE_PLAYER
  MULTI_PLAYER
}

enum GameStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
